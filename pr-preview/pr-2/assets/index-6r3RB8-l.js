var y=Object.defineProperty;var m=(r,t,e)=>t in r?y(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var n=(r,t,e)=>m(r,typeof t!="symbol"?t+"":t,e);import"./modulepreload-polyfill-B5Qt9EMX.js";class a{constructor(){n(this,"subscribers");this.subscribers=new Set}subscribe(t){this.subscribers.add(t)}unsubscribe(t){this.subscribers.delete(t)}notify(t){this.subscribers.forEach(e=>e.update(t))}}class f extends a{constructor(t,e){super(),this.playersCount=t,this.currentPlayerIndex=e}next(){this.notify(this.currentPlayerIndex%this.playersCount),this.currentPlayerIndex+=1}}class b extends a{constructor(e=6){super();n(this,"currentPlayerIndex",0);n(this,"turnGenerator",new f(2,this.currentPlayerIndex));this.sidesCount=e,this.turnGenerator.subscribe(this)}update(e){this.currentPlayerIndex=e}roll(){this.turnGenerator.next();const e={playerIndex:this.currentPlayerIndex,diceResult:this.getDiceResult()};this.notify(e)}getDiceResult(){const e=new Uint8Array(1),s=window.crypto.getRandomValues(e);return Math.floor(s[0]/256*this.sidesCount)+1}}class x extends a{constructor(){super(...arguments);n(this,"players",[]);n(this,"winner",null);n(this,"rolls",[]);n(this,"diceGenerator",new b)}addPlayers(e){for(const s of e)this.players.includes(s)||this.players.push(s),this.diceGenerator.subscribe(s)}start(){this.players.forEach(e=>e.subscribe(this))}makeMove(){this.winner||this.diceGenerator.roll()}update(e){const{playerIndex:s,diceResult:i,isWinner:o}=e;this.rolls.push(i),o&&(this.winner=this.players.at(s)??null);const l={winner:this.winner,rolls:this.rolls,players:this.players};this.notify(l)}}class d extends a{constructor(e){super();n(this,"diceResults",[]);n(this,"isWinner",!1);n(this,"sumToWin",21);this.playerIndex=e}update(e){const{playerIndex:s,diceResult:i}=e;if(this.playerIndex!==s)return;this.diceResults.push(i);const o=this.diceResults.reduce((h,p)=>h+p,0);this.isWinner=o>=this.sumToWin;const l=this.makeResultInfo(i);this.notify(l)}getDiceResults(){return[...this.diceResults]}makeResultInfo(e){return{playerIndex:this.playerIndex,diceResult:e,isWinner:this.isWinner}}}class C{constructor(){n(this,"diceCapContainer",document.querySelector(".dice-cap-container"));n(this,"generalSumContainer",document.querySelector(".general-sum"));n(this,"firstContainer",document.querySelector(".container1"));n(this,"firstSumContainer",document.querySelector(".sum1"));n(this,"secondContainer",document.querySelector(".container2"));n(this,"secondSumContainer",document.querySelector(".sum2"))}update(t){const{winner:e,rolls:s,players:i}=t;e&&this.colorWinnerField(e.playerIndex),this.updateField(s,this.diceCapContainer),i.forEach(o=>this.updateField(o.getDiceResults(),o.playerIndex===0?this.firstContainer:this.secondContainer))}updateField(t,e){if(e==null)return;e.innerText=t.join(" ");const s=t.reduce((i,o)=>i+o,0);e===this.diceCapContainer?this.updateSum(s,this.generalSumContainer):e===this.firstContainer?this.updateSum(s,this.firstSumContainer):this.updateSum(s,this.secondSumContainer)}updateSum(t,e){e&&(e.innerText=String(t))}colorWinnerField(t){const e=t===0?this.firstContainer:this.secondContainer,s=e==null?void 0:e.parentElement;s&&s.classList.add("winner")}}const u=new x,I=new d(0),S=new d(1),R=new C;u.addPlayers([I,S]);u.start();u.subscribe(R);function w(){u.makeMove()}const c=document.querySelector(".roll-button");c==null||c.addEventListener("click",w);
